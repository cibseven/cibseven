#!groovy

@Library('cib-pipeline-library@DEVOPS-146_high-resources') _

import de.cib.pipeline.library.Constants
import de.cib.pipeline.library.kubernetes.BuildPodCreator
import de.cib.pipeline.library.logging.Logger
import de.cib.pipeline.library.ConstantsInternal
import de.cib.pipeline.library.MavenProjectInformation
import groovy.transform.Field
import com.cloudbees.groovy.cps.NonCPS

@Field Logger log = new Logger(this)
@Field MavenProjectInformation mavenProjectInformation = null
@Field Map pipelineParams = [
    pom: ConstantsInternal.DEFAULT_MAVEN_POM_PATH,
    mvnContainerName: Constants.MAVEN_JDK_17_CONTAINER,
    uiParamPresets: [:],
    testMode: false
]

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: dind
spec:
  containers:
  - name: dind
    image: docker:dind
    securityContext:
      privileged: true
    resources:
      requests:
        memory: "256Mi"
        ephemeral-storage: "2Gi"
      limits:
        memory: "256Mi"
        ephemeral-storage: "2Gi"
"""
            defaultContainer 'dind'
        }
    }
    stages {
        stage('Testcontainers Integration Tests') {
            steps {

              /*
              sh '''
                  # Install curl for testing
                  apk add --no-cache curl
                  
                  # Run a small HTTP server in the background
                  docker run -d --name test-server -p 8080:80 nginx:alpine
                  
                  # Wait a moment for the server to start
                  sleep 5
                  
                  # Test the server with curl
                  curl -f http://localhost:8080/
                  
                  # Show running containers
                  docker ps -a
                  
                  # Clean up
                  docker stop test-server
                  docker rm test-server
              '''
              */

              sh '''
                  # Install mysql client for testing
                  apk add --no-cache mysql-client
                  
                  # Run MariaDB in the background
                  docker run -d --name test-mariadb \
                    -e MYSQL_ROOT_PASSWORD=testpass \
                    -e MYSQL_DATABASE=testdb \
                    -p 3306:3306 \
                    mariadb:latest
                  
                  # Wait for MariaDB to start up (it takes longer than nginx)
                  echo "Waiting for MariaDB to start..."
                  # Check if MariaDB is ready by attempting connections
                  for i in {1..30}; do
                    if mysql -h localhost -P 3306 -u root -ptestpass -e "SELECT 1;" >/dev/null 2>&1; then
                      echo "MariaDB is ready after $i attempts!"
                      break
                    fi
                    echo "Attempt $i: MariaDB not ready yet, waiting..."
                    sleep 2
                  done
                  
                  # Final check to ensure it's actually working
                  mysql -h localhost -P 3306 -u root -ptestpass -e "SELECT 1;" || exit 1
                  
                  # Test connection to MariaDB
                  mysql -h localhost -P 3306 -u root -ptestpass -e "SELECT VERSION();"
                  mysql -h localhost -P 3306 -u root -ptestpass -e "SHOW DATABASES;"
                  
                  # Show running containers
                  docker ps -a
                  
                  # Clean up
                  docker stop test-mariadb
                  docker rm test-mariadb
              '''

              /*
              sh 'cat /etc/*release*'
              sh 'docker version'
              sh 'docker info'
              sh 'docker ps -a'
              */

              /*
              sh '''
                  apk add --no-cache openjdk17 maven
                  java -version
                  mvn -version
              '''
              */

              /*
              sh '''
                mvn clean install -f parent/pom.xml
                mvn clean install -f internal-dependencies/pom.xml
                mvn clean install -f database/pom.xml
                mvn dependency:tree -DskipTests -f test-utils/testcontainers/pom.xml | grep commons-compress
                mvn clean install -DskipTests -f test-utils/testcontainers/pom.xml
                mvn -f engine/pom.xml -Dtest=ProcessInstanceAuthorizationTest#testSimpleQueryWithoutAuthorization test -P mariadb,testcontainers
              '''
              */

              /*
              script {
                  parallel (
                      'Maven Test': {
                          sh 'mvn -f engine/pom.xml -Dtest=ProcessInstanceAuthorizationTest#testSimpleQueryWithoutAuthorization test -P mariadb,testcontainers'
                      },
                      'Docker Monitor': {
                          sh '''
                              i=1
                              while [ $i -le 60 ]; do
                                  echo "=== Iteration $i at $(date) ==="
                                  docker ps -a
                                  sleep 5
                                  i=$((i + 1))
                              done
                          '''
                      }
                  )
              }
              */
              
            }
        }
    }
}

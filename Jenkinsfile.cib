#!groovy

@Library('cib-pipeline-library') _

import de.cib.pipeline.library.Constants
import de.cib.pipeline.library.kubernetes.BuildPodCreator
import de.cib.pipeline.library.logging.Logger
import de.cib.pipeline.library.ConstantsInternal
import de.cib.pipeline.library.MavenProjectInformation
import groovy.transform.Field

@Field Logger log = new Logger(this)
@Field MavenProjectInformation mavenProjectInformation = null
@Field Map pipelineParams = [
    pom: ConstantsInternal.DEFAULT_MAVEN_POM_PATH,
    mvnContainerName: Constants.MAVEN_JDK_17_CONTAINER,
    uiParamPresets: [:],
    testMode: false
]

pipeline {
    agent {
        kubernetes {
            yaml BuildPodCreator.cibStandardPod()
                    .withContainerFromName(pipelineParams.mvnContainerName)
                    .asYaml()
            defaultContainer pipelineParams.mvnContainerName
        }
    }

    // Trigger
    triggers {
        // Triggers only for master and when not in test mode
        cron(env.BRANCH_NAME.equals('master') && !pipelineParams.testMode ? 'H H * * 1-5' : '')
    }

    // Parameter that can be changed in the Jenkins UI
    parameters {
        booleanParam(
            name: 'BUILD_FEATURE_BRANCH',
            defaultValue: true,
            description: 'Build feature branch'
        )
        booleanParam(
            name: 'VERIFY',
            defaultValue: true,
            description: 'Execute Unit and Integration Tests'
        )
        booleanParam(
            name: 'RELEASE',
            defaultValue: false,
            description: 'Only for master branch; Release or snapshot build'
        )
        choice(
            name: 'DEPLOY',
            choices: ['Auto', 'Run', 'Disable'],
            description: """Only for master branch;
                When
                - RELEASE=false, DEPLOY=Auto|Run: deploy artifacts to artifacts.cibseven.org
                - RELEASE=true, DEPLOY=Run: deploy artifacts to artifacts.cibseven.org
            """
        )
        password(
            name: 'DEPLOY_MAVEN_CENTRAL_PASSWORD',
            defaultValue: '',
            description: 'Enter a password for deployment to Maven Central (no need to activate DEPLOY parameter above if you want just to deploy to Maven Central). If you will not change this value - you will not run deploy to Maven Central.'
        )
        choice(
            name: 'OPEN_API',
            choices: ['Auto', 'Run', 'Disable'],
            description: """Only for master branch;
                When
                - OPEN_API=Auto: creates openAPI index.html only for master branch with RELEASE=true
                - OPEN_API=Run: creates openAPI index.html
            """
        )
        choice(
            name: 'JAVA_DOCS',
            choices: ['Auto', 'Run', 'Disable'],
            description: """Only for master branch;
                When
                - JAVA_DOCS=Auto: creates javaDocs pages only for master branch with RELEASE=true
                - JAVA_DOCS=Run: creates javaDocs pages
            """
        )
    }

    options {
        buildDiscarder(
            logRotator(
                // number of build logs to keep
                numToKeepStr:'5',
                // history to keep in days
                daysToKeepStr: '15',
                // artifacts are kept for days
                artifactDaysToKeepStr: '15',
                // number of builds have their artifacts kept
                artifactNumToKeepStr: '5'
            )
        )
        // Stop build after 240 minutes
        timeout(time: 240, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    stages {
        stage('Print Settings & Checkout') {
            steps {
                script {
                    printSettings()

                    def pom = readMavenPom file: pipelineParams.pom

                    // for overlays often no groupId is set as the parent groupId is used
                    def groupId = pom.groupId
                    if (groupId == null) {
                        groupId = pom.parent.groupId
                        log.info "parent groupId is used"
                    }

                    mavenProjectInformation = new MavenProjectInformation(groupId, pom.artifactId, pom.version, pom.name, pom.description)

                    log.info "Build Project: ${mavenProjectInformation.groupId}:${mavenProjectInformation.artifactId}, ${mavenProjectInformation.name} with version ${mavenProjectInformation.version}"

                    // Avoid Git "dubious ownership" error in checked out repository. Needed in
                    // build containers with newer Git versions. Originates from Jenkins running
                    // pipeline as root but repository being owned by user 1000. For more, see
                    // https://stackoverflow.com/questions/72978485/git-submodule-update-failed-with-fatal-detected-dubious-ownership-in-repositor
                    sh "git config --global --add safe.directory \$(pwd)"
                }
            }
        }

        stage('Build') {
            when {
                anyOf {
                    expression { params.BUILD_FEATURE_BRANCH == true }
                    expression { params.VERIFY == true }
                }
            }
            steps {
                script {
                    withMaven(options: [artifactsPublisher(fingerprintFilesDisabled: true, archiveFilesDisabled: true)]) {
                        sh "mvn -V -U -T4 -Dbuild.number=${BUILD_NUMBER} -f ${pipelineParams.pom} clean install -DskipTests -Pwebapps-integration"
                    }
                }
            }
        }

        stage('Unit and Integration Tests') {
            when {
                expression { params.VERIFY == true }
            }
            steps {
                script {
                    withMaven(options: [junitPublisher(disabled: false), jacocoPublisher(disabled: false)]) {
                        sh """
                            mvn -f ${pipelineParams.pom} \
                                -Dbuild.number=${BUILD_NUMBER} \
                                verify \
                                -Dmaven.test.failure.ignore=true \
                                -pl !org.cibseven.bpm:cibseven-engine-spring-6,!:cibseven-spin-core,!:cibseven-engine-rest-core-jakarta,!:cibseven-webapp-jakarta,!:cibseven-engine-cdi-jakarta,!:cibseven-example-invoice-jakarta,!:cibseven-ejb-client-jakarta,!:cibseven-qa-integration-tests-engine-jakarta,!:cibseven-sql-scripts
                        """

                        sh """
                            mvn -f ${pipelineParams.pom} \
                                -Dbuild.number=${BUILD_NUMBER} \
                                verify \
                                -Dmaven.test.failure.ignore=true \
                                -pl org.cibseven.bpm:cibseven-engine-spring-6,:cibseven-spin-core,:cibseven-engine-rest-core-jakarta,:cibseven-webapp-jakarta,:cibseven-engine-cdi-jakarta,:cibseven-example-invoice-jakarta,:cibseven-ejb-client-jakarta,:cibseven-qa-integration-tests-engine-jakarta,:cibseven-sql-scripts \
                                -fn
                        """
                    }

                    junit allowEmptyResults: true, testResults: ConstantsInternal.MAVEN_TEST_RESULTS
                }
            }
        }

        stage('h2 UNIT, engine IT, webapp IT') {
            when {
                expression { params.VERIFY != params.VERIFY } // just disable this stage temporary
            }
            parallel {
                stage('engine') {
                    stages {
                        stage('engine-UNIT-historylevel-audit') {
                            steps { script { withMaven { sh "mvn -f engine/pom.xml verify -Pcfghistoryaudit" }}}
                        }
                        stage('engine-UNIT-database-table-prefix') {
                            steps { script { withMaven { sh "mvn -f engine/pom.xml verify -Pcfghistoryactivity" }}}
                        }
                    }
                }
                stage('quarkus-UNIT') {
                    steps { script { withMaven { sh "mvn -f quarkus-extension/pom.xml clean install -Pquarkus-tests" }}}
                }
                stage('qa') {
                    stages {
                        stage('engine-IT-tomcat-9-postgresql-142') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Ptomcat9,postgresql,engine-integration" }}}
                        }
                        stage('engine-IT-tomcat-10-postgresql-142') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Ptomcat,postgresql,engine-integration-jakarta" }}}
                        }
                        stage('engine-IT-wildfly-postgresql-142') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Pwildfly,postgresql,engine-integration-jakarta" }}}
                        }
                        stage('engine-IT-wildfly26-postgresql-142') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Pwildfly26,postgresql,engine-integration" }}}
                        }
                        stage('engine-IT-XA-wildfly-postgresql-142') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Pwildfly,postgresql,postgresql-xa,engine-integration-jakarta" }}}
                        }
                        stage('engine-IT-XA-wildfly26-postgresql-142') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Pwildfly26,postgresql,postgresql-xa,engine-integration" }}}
                        }
                        stage('webapp-IT-tomcat-9-h2') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Ptomcat9,h2,webapps-integration" }}}
                        }
                        stage('webapp-IT-tomcat-10-h2') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Ptomcat,h2,webapps-integration" }}}
                        }
                        stage('webapp-IT-wildfly-h2') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Pwildfly,h2,webapps-integration" }}}
                        }
                        stage('webapp-IT-wildfly26-h2') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean install -Pwildfly26,h2,webapps-integration" }}}
                        }
                    }
                }
                stage('camunda-run-IT') {
                    steps { script { withMaven { sh "mvn -fn -f distro/run/pom.xml install -Pintegration-test-camunda-run" }}}
                }
                stage('spring-boot-starter-IT') {
                    steps { script { withMaven { sh "mvn -fn -f spring-boot-starter/pom.xml install -Pintegration-test-spring-boot-starter" }}}
                }
            }
        }

        stage('MISC tests') {
            when {
                expression { params.VERIFY == true }
            }
            parallel {
                stage('engine') {
                    stages {
                        stage('engine-api-compatibility') {
                            steps { script { withMaven { sh "mvn -f engine/pom.xml verify -Pcheck-api-compatibility" }}}
                        }
                        stage('engine-UNIT-database-table-prefix') {
                            steps { script { withMaven { sh "mvn -f engine/pom.xml test -Pdb-table-prefix" }}}
                        }
                    }
                }
                stage('webapp-UNIT-database-table-prefix') {
                    steps { script { withMaven { sh "mvn -f webapps/assembly/pom.xml test -Pdb-table-prefix -Dskip.frontend.build=true" }}}
                }
                stage('engine-IT-wildfly') {
                    when {
                        expression { params.VERIFY != params.VERIFY } // just disable this stage temporary
                    }
                    stages {
                        stage('engine-IT-wildfly-domain') {
                            steps { script { withMaven { sh "mvn -f qa/pom.xml clean verify -Pwildfly-domain,h2,engine-integration-jakarta" }}}
                        }
                        stage('engine-IT-wildfly-servlet') {
                            steps { script { withMaven { sh "mvn -f qa/pom.xml clean verify -Pwildfly,wildfly-servlet,h2,engine-integration-jakarta" }}}
                        }
                        stage('engine-IT-wildfly26-domain') {
                            steps { script { withMaven { sh "mvn -f qa/pom.xml clean verify -Pwildfly26-domain,h2,engine-integration" }}}
                        }
                        stage('engine-IT-wildfly26-servlet') {
                            steps { script { withMaven { sh "mvn -fn -f qa/pom.xml clean verify -Pwildfly26,wildfly26-servlet,h2,engine-integration" }}}
                        }
                    }
                }
            }
        }

        stage('Deploy to artifacts.cibseven.org') {
            when {
                anyOf {
                    // allow deploy of snapshots from main branch with RELEASE=false, DEPLOY='Auto'
                    allOf {
                        branch 'main'
                        expression { params.RELEASE == false } // it is default value
                        expression { params.DEPLOY == 'Auto' } // it is default value
                        expression { mavenProjectInformation.version.endsWith("-SNAPSHOT") == true }
                    }
                    // allow deploy DEPLOY='Run', but not with DEPLOY='Auto'.
                    expression { params.DEPLOY == 'Run' }
                }
            }
            steps {
                script {
                    String deployment = ""
                    if (isPatchVersion()) {
                        deployment = "-Dnexus.release.repository.id=mvn-cibseven-private -Dnexus.release.repository=https://artifacts.cibseven.de/repository/private"
                    }

                    withMaven(options: []) {
                        sh """
                            mvn -T4 -U \
                                -DskipTests \
                                -Pwebapps-integration ${deployment} \
                                clean deploy
                        """
                    }
                }
            }
        }

        stage('Deploy to Maven Central') {
            when {
                allOf {
                    expression { params.DEPLOY_MAVEN_CENTRAL_PASSWORD.toString().isEmpty() == false } // "" is default value
                    expression { mavenProjectInformation.version.endsWith("-SNAPSHOT") == false }
                    expression { isPatchVersion() == false }
                }
            }
            steps {
                script {
                    withMaven(options: []) {
                        sh """
                            mvn -T4 -U \
                                clean deploy \
                                -Psonatype-oss-release \
                                -Dskip.cibseven.release=false \
                                -DskipTests \
                                -Dgpg.passphrase=${params.DEPLOY_MAVEN_CENTRAL_PASSWORD}
                        """
                    }
                }
            }
        }

        stage('Documentation, OpenAPI') {
            when {
                anyOf {
                    expression { params.OPEN_API == 'Run' }
                    allOf {
                        branch 'main'
                        expression { params.RELEASE == true }
                        expression { params.OPEN_API == 'Auto' }
                        expression { isPatchVersion() == false }
                    }
                }
            }
            steps {
                script {
                    withMaven {
                        sh 'mvn -f engine-rest/engine-rest-openapi/pom.xml clean install -U'
                        sh 'mvn -f engine-rest/docs/pom.xml clean package -U'
                    }

                    // put as artifact to jenkins job
                    zip zipFile: 'openAPI-index-html.zip', archive: true, overwrite: true, glob: 'engine-rest/docs/target/index.html'
                    archiveArtifacts artifacts: 'openAPI-index-html.zip', fingerprint: true

                    String docsVersion = getDocsVersion()
                    String docsRepoName = getDocsRepoName()

                    // deploy to github pages
                    pushToDocsRepo("Update open API index.html to ${docsVersion}", {
                        sh "mkdir -p ${docsRepoName}/rest/cibseven/${docsVersion}"
                        sh "mv -f engine-rest/docs/target/index.html ${docsRepoName}/rest/cibseven/${docsVersion}/index.html"
                    })

                    // clean up
                    withMaven {
                        sh 'mvn -f engine-rest/engine-rest-openapi/pom.xml clean'
                        sh 'mvn -f engine-rest/docs/pom.xml clean'
                    }
                }
            }
        }

        stage('Documentation, javaDocs') {
            when {
                anyOf {
                    expression { params.JAVA_DOCS == 'Run' }
                    allOf {
                        branch 'main'
                        expression { params.RELEASE == true }
                        expression { params.JAVA_DOCS == 'Auto' }
                        expression { isPatchVersion() == false }
                    }
                }
            }
            steps {
                script {
                    withMaven {
                        sh """
                            mvn package \
                                javadoc:javadoc \
                                javadoc:aggregate \
                                -Pdistro,distro-wildfly,distro-webjar,javadocs \
                                -pl \'!distro/wildfly/modules,!distro/wildfly26/modules,!engine-rest/engine-rest-openapi\' \
                                -DskipTests=true \
                                -Dskip.frontend.build=true \
                                -U
                        """
                    }

                    String docsVersion = getDocsVersion()
                    String docsRepoName = getDocsRepoName()

                    // put as artifact to jenkins job
                    zip zipFile: 'javaDocs.zip', archive: true, overwrite: true, glob: 'target/site/apidocs/'
                    archiveArtifacts artifacts: 'javaDocs.zip', fingerprint: true

                    // deploy to github pages
                    pushToDocsRepo("Update javaDocs to ${docsVersion}", {
                        sh "mkdir -p ${docsRepoName}/javadoc/cibseven/${docsVersion}"
                        sh "rm -r ${docsRepoName}/javadoc/cibseven/${docsVersion}/* || true"
                        sh "cp -Rf target/site/apidocs/. ${docsRepoName}/javadoc/cibseven/${docsVersion}/"
                    })
                }
            }
        }
    }

    post {
        always {
            script {
                log.info 'End of the build'
            }
        }

        success {
            script {
                log.info '✅ Build successful'
                if (params.RELEASE_BUILD == true) {
                    notifyResult(
                        office365WebhookId: pipelineParams.office365WebhookId,
                        message: "Application was successfully released with version ${mavenProjectInformation.version}"
                    )
                }
            }
        }

        unstable {
            script {
                log.warning '⚠️ Build unstable'
            }
        }

        failure {
            script {
                log.warning '❌ Build failed'
                if (env.BRANCH_NAME == 'master') {
                    notifyResult(
                        office365WebhookId: pipelineParams.office365WebhookId,
                        message: "Access build info at ${env.BUILD_URL}"
                    )
                }
            }
        }

        fixed {
            script {
                log.info '✅ Previous issues fixed'
                if (env.BRANCH_NAME == 'master') {
                    notifyResult(
                        office365WebhookId: pipelineParams.office365WebhookId,
                        message: "Access build info at ${env.BUILD_URL}"
                    )
                }
            }
        }
    }
}

// - "1.2.0" -> no
// - "1.2.0-SNAPSHOT" -> no
// - "1.2.3" -> yes
// - "1.2.3-SNAPSHOT" -> yes
// - "7.22.0-cibseven" -> no
// - "7.22.1-cibseven" -> yes
def isPatchVersion() {
    List version = mavenProjectInformation.version.tokenize('.')
    if (version.size() < 3) {
        return false
    }
    return version[2].tokenize('-')[0] != "0"
}

// returns "1.2" for versions
// - "1.2.0"
// - "1.2.3-SNAPSHOT"
def getDocsVersion() {
    List version = mavenProjectInformation.version.tokenize('.')
    return "${version[0]}.${version[1]}"
}

def getDocsRepoName() {
    if (mavenProjectInformation.version.indexOf("SNAPSHOT") > 0) {
        return "docs-staging.cibseven.org"
    }
    else {
        return "docs.cibseven.org"
    }
}

def pushToDocsRepo(String commmitMessage, Closure updateRepo) {
    String docsRepoName = getDocsRepoName()

    // deploy to github pages
    sh "mkdir -p ${docsRepoName}"
    sh "chown 1000:1000 ${docsRepoName}"

    // Avoid Git "dubious ownership" error in checked out repository. Needed in
    // build containers with newer Git versions. Originates from Jenkins running
    // pipeline as root but repository being owned by user 1000. For more, see
    // https://stackoverflow.com/questions/72978485/git-submodule-update-failed-with-fatal-detected-dubious-ownership-in-repositor
    sh "git config --global --add safe.directory \$(pwd)/${docsRepoName}"

    // checkout repo once
    def repoDownloaded = fileExists "${docsRepoName}/README.md"
    if (!repoDownloaded) {
        checkout changelog: false, poll: false, scm: scmGit(branches: [[name: 'main']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: docsRepoName]], userRemoteConfigs: [[credentialsId: 'credential-github-cib-seven-access-token', url: "https://github.com/cibseven/${docsRepoName}.git"]])
    }

    updateRepo()

    // push to repo
    withCredentials([gitUsernamePassword(credentialsId: 'credential-github-cib-seven-access-token', gitToolName: 'Default')]) {
        sh """#!/bin/bash
            chown -R 1000:1000 ${docsRepoName}
            cd ${docsRepoName}
            pwd
            git status
            git add *
            if ! git diff-index --quiet HEAD --
            then
                echo "Some files were changed -> commit changes"
                git config --global user.email \"${ConstantsInternal.JENKINS_GIT_USER_EMAIL}\"
                git config --global user.name \"${ConstantsInternal.JENKINS_GIT_USER_NAME}\"
                git commit -am "$commmitMessage"

                echo "Push to github"
                # always return true so that the build does not fail if there are no changes
                git push origin HEAD:main || true
            else
                echo "No changes -> nothing to do more"
            fi
        """
    }
}

#!groovy

@Library('cib-pipeline-library') _

import de.cib.pipeline.library.Constants
import de.cib.pipeline.library.kubernetes.BuildPodCreator
import de.cib.pipeline.library.logging.Logger
import de.cib.pipeline.library.ConstantsInternal
import de.cib.pipeline.library.MavenProjectInformation
import groovy.transform.Field

@Field Logger log = new Logger(this)
@Field MavenProjectInformation mavenProjectInformation = null
@Field List<String> helmChartPaths = []
@Field Map pipelineParams = [
    pom: ConstantsInternal.DEFAULT_MAVEN_POM_PATH,
    mvnContainerName: Constants.MAVEN_JDK_17_CONTAINER,
    uiParamPresets: [:],
    testMode: false
]

pipeline {
    agent {
        kubernetes {
            yaml BuildPodCreator.cibStandardPod()
                    .withContainerFromName(pipelineParams.mvnContainerName)
                    .withHelm3Container()
                    .withKanikoContainer()
                    .withSyftContainer()
                    .asYaml()
            defaultContainer pipelineParams.mvnContainerName
        }
    }

    // Trigger
    triggers {
        // Triggers only for master and when not in test mode
        cron(env.BRANCH_NAME.equals('master') && !pipelineParams.testMode ? 'H H * * 1-5' : '')
    }

    // Parameter that can be changed in the Jenkins UI
    parameters {
        booleanParam(
            name: 'BUILD_FEATURE_BRANCH',
            defaultValue: true,
            description: 'Build feature branch; Only for non master branch'
        )
        choice(
            name: 'UNIT_TESTS',
            choices: ['Auto', 'Run', 'Disable'],
            description: """Execute Unit Tests
                When
                - Auto|Run: run unit tests
                - Disable: disable unit test run
            """
        )
        choice(
            name: 'INTEGRATION_TESTS',
            choices: ['Auto', 'Run', 'Disable'],
            description: """Execute Integration Unit Tests
                When
                - Auto: 
                    - feature branch, pull request: disabled
                    - master branch: run integration unit tests
                - Run: run integration unit tests
                - Disable: disable integration unit test run
            """
        )
        booleanParam(
            name: 'RELEASE',
            defaultValue: false,
            description: 'Only for master branch; Release or snapshot build'
        )
        choice(
            name: 'DEPLOY',
            choices: ['Auto', 'Run', 'Disable'],
            description: """Only for master branch;
                When
                - RELEASE=false, DEPLOY=Auto|Run: deploy snapshot artefacts
                - RELEASE=true, DEPLOY=Run: deploy release artefacts
            """
        )
        choice(
            name: 'OPEN_API',
            choices: ['Auto', 'Run', 'Disable'],
            description: """Only for master branch;
                When
                - OPEN_API=Auto: creates openAPI index.html only for master branch with RELEASE=true
                - OPEN_API=Run: creates openAPI index.html
            """
        )
        choice(
            name: 'JAVA_DOCS',
            choices: ['Auto', 'Run', 'Disable'],
            description: """Only for master branch;
                When
                - JAVA_DOCS=Auto: creates javaDocs pages only for master branch with RELEASE=true
                - JAVA_DOCS=Run: creates javaDocs pages
            """
        )
    }

    options {
        buildDiscarder(
            logRotator(
                // number of build logs to keep
                numToKeepStr:'5',
                // history to keep in days
                daysToKeepStr: '15',
                // artifacts are kept for days
                artifactDaysToKeepStr: '15',
                // number of builds have their artifacts kept
                artifactNumToKeepStr: '5'
            )
        )
        // Stop build after 120 minutes
        timeout(time: 120, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    stages {
        stage('Print Settings & Checkout') {
            steps {
                script {
                    printSettings()

                    def pom = readMavenPom file: pipelineParams.pom

                    // for overlays often no groupId is set as the parent groupId is used
                    def groupId = pom.groupId
                    if (groupId == null) {
                        groupId = pom.parent.groupId
                        log.info "parent groupId is used"
                    }

                    mavenProjectInformation = new MavenProjectInformation(groupId, pom.artifactId, pom.version, pom.name, pom.description)

                    log.info "Build Project: ${mavenProjectInformation.groupId}:${mavenProjectInformation.artifactId}, ${mavenProjectInformation.name} with version ${mavenProjectInformation.version}"

                    // Avoid Git "dubious ownership" error in checked out repository. Needed in
                    // build containers with newer Git versions. Originates from Jenkins running
                    // pipeline as root but repository being owned by user 1000. For more, see
                    // https://stackoverflow.com/questions/72978485/git-submodule-update-failed-with-fatal-detected-dubious-ownership-in-repositor
                    sh "git config --global --add safe.directory \$(pwd)"
                }
            }
        }

        stage('Build') {
            when {
                anyOf {
                    allOf {
                        expression { params.BUILD_FEATURE_BRANCH == true }
                    }
                    allOf {
                        expression { params.BUILD_FEATURE_BRANCH == false }
                        anyOf {
                            expression { params.UNIT_TESTS == 'Run' }
                            expression { params.INTEGRATION_TESTS == 'Run' }
                        }
                    }
                }
            }
            steps {
                script {
                    withMaven(options: [artifactsPublisher(fingerprintFilesDisabled: true, archiveFilesDisabled: true)]) {
                        sh "mvn -V -f ${pipelineParams.pom} clean"
                        sh("mvn -U -Dbuild.number=${BUILD_NUMBER} -pl org.camunda.bpm:camunda-bom,org.camunda.bpm:camunda-only-bom,org.camunda.bpm:camunda-bom-root install -DskipTests") || true
                        sh "mvn -U -Dbuild.number=${BUILD_NUMBER} -f qa/integration-tests-webapps/integration-tests/pom.xml install -DskipTests"
                        sh "mvn -U -Dbuild.number=${BUILD_NUMBER} -f qa/integration-tests-webapps/pom.xml install -DskipTests"
                        sh "mvn -U -Dbuild.number=${BUILD_NUMBER} -f ${pipelineParams.pom} install -DskipTests"
                    }
                }
            }
        }

        stage('Unit and Integration Tests') {
            when {
                anyOf {
                    expression { params.UNIT_TESTS == 'Auto' }
                    expression { params.UNIT_TESTS == 'Run' }
                    allOf {
                        expression { params.INTEGRATION_TESTS == 'Auto' }
                        anyOf {
                            branch 'master'
                            branch 'main'
                            branch 'cibseven-1.0'
                        }
                    }
                    expression { params.INTEGRATION_TESTS == 'Run' }
                }
            }
            steps {
                script {
                    def testMode = "test"
                    if (params.INTEGRATION_TESTS == 'Run' || (params.INTEGRATION_TESTS == 'Auto' && env.BRANCH_NAME == 'master')) {
                        testMode = "verify"
                    }

                    withMaven(options: [junitPublisher(disabled: false), jacocoPublisher(disabled: false)]) {
                        sh """
                            mvn -f ${pipelineParams.pom} \
                                -U \
                                -Dbuild.number=${BUILD_NUMBER} \
                                ${testMode} \
                                -Dmaven.test.failure.ignore=true \
                                -pl !org.camunda.bpm:camunda-engine-spring-6,!:camunda-spin-core,!:camunda-engine-rest-core-jakarta,!:camunda-webapp-jakarta,!:camunda-engine-cdi-jakarta,!:camunda-example-invoice-jakarta,!:camunda-ejb-client-jakarta,!:camunda-qa-integration-tests-engine-jakarta,!:camunda-sql-scripts
                        """

                        sh """
                            mvn -f ${pipelineParams.pom} \
                                -U \
                                -Dbuild.number=${BUILD_NUMBER} \
                                ${testMode} \
                                -Dmaven.test.failure.ignore=true \
                                -pl org.camunda.bpm:camunda-engine-spring-6,:camunda-spin-core,:camunda-engine-rest-core-jakarta,:camunda-webapp-jakarta,:camunda-engine-cdi-jakarta,:camunda-example-invoice-jakarta,:camunda-ejb-client-jakarta,:camunda-qa-integration-tests-engine-jakarta,:camunda-sql-scripts \
                                -fn
                        """
                    }

                    junit allowEmptyResults: true, testResults: ConstantsInternal.MAVEN_TEST_RESULTS
                }
            }
        }

        stage('Deploy snapshot to nexus.cib.de') {
            when {
                allOf {
                    anyOf {
                        branch 'master'
                        branch 'main'
                        branch 'cibseven-1.0'
                    }
                    expression { params.RELEASE == false }
                    anyOf {
                        expression { params.DEPLOY == 'Auto' }
                        expression { params.DEPLOY == 'Run' }
                    }
                }
            }
            steps {
                script {
                    if (!mavenProjectInformation.version.endsWith("-SNAPSHOT")) {
                        error("Version should contain -SNAPSHOT postfix; actual value: ${mavenProjectInformation.version}")
                    }

                    withMaven(options: [artifactsPublisher(archiveFilesDisabled: false)]) {
                        sh """
                            mvn -f ${pipelineParams.pom} \
                                -V -U \
                                -DskipTests \
                                org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom \
                                deploy \
                                -Dnexus.snapshot.repository.id=mvn-cibseven-snapshot \
                                -Dnexus.snapshot.repository=https://nexus.cib.de/repository/mvn-cibseven-snapshot
                        """
                    }
                }
            }
        }

        stage('Deploy release to nexus.cib.de') {
            when {
                allOf {
                    anyOf {
                        branch 'master'
                        branch 'main'
                        branch 'cibseven-1.0'
                    }
                    expression { params.RELEASE == true }
                    expression { params.DEPLOY == 'Run' }
                }
            }
            steps {
                script {
                    if (mavenProjectInformation.version.endsWith("-SNAPSHOT")) {
                        error("Version should not contain -SNAPSHOT postfix; actual value: ${mavenProjectInformation.version}")
                    }

                    withMaven(options: [artifactsPublisher(archiveFilesDisabled: false)]) {
                        sh """
                            mvn -f ${pipelineParams.pom} \
                                -V -U \
                                clean \
                                -DskipTests \
                                org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom \
                                deploy \
                                -Dnexus.snapshot.repository.id=mvn-cibseven-release \
                                -Dnexus.snapshot.repository=https://nexus.cib.de/repository/mvn-cibseven-release
                        """
                    }
                }
            }
        }

        stage('Documentation, OpenAPI') {
            when {
                anyOf {
                    expression { params.OPEN_API == 'Run' }
                    allOf {
                        anyOf {
                            branch 'master'
                            branch 'main'
                            branch 'cibseven-1.0'
                        }
                        expression { params.RELEASE == true }
                        expression { params.OPEN_API == 'Auto' }
                    }
                }
            }
            steps {
                script {
                    withMaven {
                        sh 'mvn -f engine-rest/engine-rest-openapi/pom.xml clean install -U'
                        sh 'mvn -f engine-rest/docs/pom.xml clean package -U'
                    }

                    // put as artifact to jenkins job
                    zip zipFile: 'openAPI-index-html.zip', archive: true, overwrite: true, glob: 'engine-rest/docs/target/index.html'
                    archiveArtifacts artifacts: 'openAPI-index-html.zip', fingerprint: true

                    // deploy to github pages
                    pushToDocsRepo("Update open API index.html", {
                        sh 'mkdir -p docs-cibseven-de/rest/cibseven/1.0'
                        sh 'mv -f engine-rest/docs/target/index.html docs-cibseven-de/rest/cibseven/1.0/index.html'
                    })

                    // clean up
                    withMaven {
                        sh 'mvn -f engine-rest/engine-rest-openapi/pom.xml clean'
                        sh 'mvn -f engine-rest/docs/pom.xml clean'
                    }
                }
            }
        }

        stage('Documentation, javaDocs') {
            when {
                anyOf {
                    expression { params.JAVA_DOCS == 'Run' }
                    allOf {
                        anyOf {
                            branch 'master'
                            branch 'main'
                            branch 'cibseven-1.0'
                        }
                        expression { params.RELEASE == true }
                        expression { params.JAVA_DOCS == 'Auto' }
                    }
                }
            }
            steps {
                script {
                    withMaven {
                        sh """
                            mvn package \
                                javadoc:javadoc \
                                javadoc:aggregate \
                                -Pdistro,distro-wildfly,distro-webjar,javadocs \
                                -pl \'!distro/wildfly/modules,!distro/wildfly26/modules,!engine-rest/engine-rest-openapi\' \
                                -DskipTests=true \
                                -Dskip.frontend.build=true \
                                -U
                        """
                    }

                    // put as artifact to jenkins job
                    zip zipFile: 'javaDocs.zip', archive: true, overwrite: true, glob: 'target/site/apidocs/'
                    archiveArtifacts artifacts: 'javaDocs.zip', fingerprint: true

                    // deploy to github pages
                    pushToDocsRepo("Update javaDocs", {
                        sh 'mkdir -p docs-cibseven-de/javadoc/cibseven/1.0'
                        sh 'rm -r docs-cibseven-de/javadoc/cibseven/1.0/*'
                        sh 'cp -Rf target/site/apidocs/. docs-cibseven-de/javadoc/cibseven/1.0/'
                    })
                }
            }
        }
    }

    post {
        always {
            script {
                log.info 'End of the build'
            }
        }

        success {
            script {
                log.info '✅ Build successful'
                if (params.RELEASE_BUILD == true) {
                    notifyResult(
                        office365WebhookId: pipelineParams.office365WebhookId,
                        message: "Application was successfully released with version ${mavenProjectInformation.version}"
                    )
                }
            }
        }

        unstable {
            script {
                log.warning '⚠️ Build unstable'
            }
        }

        failure {
            script {
                log.warning '❌ Build failed'
                if (env.BRANCH_NAME == 'master') {
                    notifyResult(
                        office365WebhookId: pipelineParams.office365WebhookId,
                        message: "Access build info at ${env.BUILD_URL}"
                    )
                }
            }
        }

        fixed {
            script {
                log.info '✅ Previous issues fixed'
                if (env.BRANCH_NAME == 'master') {
                    notifyResult(
                        office365WebhookId: pipelineParams.office365WebhookId,
                        message: "Access build info at ${env.BUILD_URL}"
                    )
                }
            }
        }
    }
}

def pushToDocsRepo(String commmitMessage, Closure updateRepo) {
    // deploy to github pages
    sh 'mkdir -p docs-cibseven-de'
    sh 'chown 1000:1000 docs-cibseven-de'

    // Avoid Git "dubious ownership" error in checked out repository. Needed in
    // build containers with newer Git versions. Originates from Jenkins running
    // pipeline as root but repository being owned by user 1000. For more, see
    // https://stackoverflow.com/questions/72978485/git-submodule-update-failed-with-fatal-detected-dubious-ownership-in-repositor
    sh "git config --global --add safe.directory \$(pwd)/docs-cibseven-de"

    // checkout repo once
    def repoDownloaded = fileExists 'docs-cibseven-de/README.md'
    if (!repoDownloaded) {
        checkout changelog: false, poll: false, scm: scmGit(branches: [[name: 'main']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'docs-cibseven-de']], userRemoteConfigs: [[credentialsId: 'credential-github-cib-seven-access-token', url: 'https://github.com/cibseven/docs-cibseven-de.git']])
    }

    updateRepo()

    // push to repo
    withCredentials([gitUsernamePassword(credentialsId: 'credential-github-cib-seven-access-token', gitToolName: 'Default')]) {
        sh """#!/bin/bash
            chown -R 1000:1000 docs-cibseven-de
            cd docs-cibseven-de
            pwd
            git status
            git add *
            if ! git diff-index --quiet HEAD --
            then
                echo "Some files were changed -> commit changes"
                git config --global user.email \"${ConstantsInternal.JENKINS_GIT_USER_EMAIL}\"
                git config --global user.name \"${ConstantsInternal.JENKINS_GIT_USER_NAME}\"
                git commit -am "$commmitMessage"

                echo "Push to github"
                # always return true so that the build does not fail if there are no changes
                git push origin HEAD:main || true
            else
                echo "No changes -> nothing to do more"
            fi
        """
    }
}

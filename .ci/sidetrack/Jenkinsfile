// https://github.com/camunda/jenkins-global-shared-library
// https://github.com/cibseven/cambpm-jenkins-shared-library
// @Library(['camunda-ci']) _
@Library('cib-pipeline-library@DEVOPS-146_high-resources') _
library identifier: 'cambpm-jenkins-shared-library@main', 
        retriever: modernSCM([
            $class: 'GitSCMSource',
            remote: 'https://github.com/cibseven/cambpm-jenkins-shared-library.git',
            credentialsId: 'credential-github-cib-seven-access-token'
        ])

import de.cib.pipeline.library.Constants
import de.cib.pipeline.library.kubernetes.BuildPodCreator
import de.cib.pipeline.library.logging.Logger
import de.cib.pipeline.library.ConstantsInternal
import de.cib.pipeline.library.MavenProjectInformation
import groovy.transform.Field

@Field Logger log = new Logger(this)
@Field MavenProjectInformation mavenProjectInformation = null
@Field Map pipelineParams = [
    pom: ConstantsInternal.DEFAULT_MAVEN_POM_PATH,
    mvnContainerName: Constants.MAVEN_JDK_17_CONTAINER,
    uiParamPresets: [:],
    testMode: false
]

pipeline {
  agent {
      kubernetes {
          yaml BuildPodCreator.cibStandardPod()
                  .withContainerFromName(pipelineParams.mvnContainerName, [memory: "12Gi", ephemeralStorage: "12Gi"])
                  .asYaml()
          defaultContainer pipelineParams.mvnContainerName
      }
  }
  environment {
    LOGGER_LOG_LEVEL = 'DEBUG'
    MAVEN_VERSION = 'maven-3.8-latest'
    DEF_JDK_VERSION = 'jdk-11-latest'
  }
  parameters {
    booleanParam name: 'TRIGGERED_BY_UPSTREAM', defaultValue: false, description: 'Is the current build triggered in the scope of an upstream pipeline (pull request or default branch)'
    string name: 'UPSTREAM_PROJECT_NAME', defaultValue: '7.XX/cambpm-ce/cambpm-main/master', description: 'Not used on standalone runs. This property is passed by the upstream build that triggers this one.'
    string name: 'UPSTREAM_BUILD_NUMBER', defaultValue: '', description: 'Not used on standalone runs. This property is passed by the upstream build that triggers this one.'
    string name: 'PR_LABELS', defaultValue: '', description: 'The labels assigned to the CE pull request'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    disableConcurrentBuilds()
  }
  triggers {
    pollSCM('H H(22-23) * * *') // Sidetrack daily runs before CE daily
  }
  stages {
    stage('Prepare') {
      when {
        expression {
          return params.TRIGGERED_BY_UPSTREAM
        }
      }
      steps {
        cambpmConditionalRetry([
          agentLabel: 'centos-stable',
          suppressErrors: false,
          runSteps: {
            cambpmCopyArtifacts(params.UPSTREAM_PROJECT_NAME, params.UPSTREAM_BUILD_NUMBER)
            cambpmStash("platform-stash-runtime",
                        ".m2/org/camunda/**/*-SNAPSHOT/**",
                        "**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz")
            cambpmStash("platform-stash-qa",
                        ".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**",
                        "**/*.zip,**/*.tar.gz")
          }
        ])
      }
    }
    stage('UNIT DB tests') {
      steps {
        script {
          // see the .ci/config/matrices.yaml for the stage generation values
          // see .ci/config/stage-types.yaml for the stage configurations
          parallel(cambpmGetMatrixStages('sidetrack-stages', [], { stageInfo ->
            List allowedStageLabels = cambpmGetLabels(stageInfo.stageType)
            String dbLabel = stageInfo.nodeType
            return cambpmWithLabels(allowedStageLabels, cambpmGetDbType(dbLabel))
          }))
        }
      }
    }
  }
  post {
    changed {
      script {
        if (!agentDisconnected()){
          cambpmSendEmailNotification()
        }
      }
    }
    always {
      cambpmWithSpanAttributes()
    }
  }
}
